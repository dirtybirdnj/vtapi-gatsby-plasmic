// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fsvVCJNXhN88gnWPeurk82
// Component: yzN9e7yMUD
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_vtapi_co.module.css" // plasmic-import: fsvVCJNXhN88gnWPeurk82/projectcss
import * as sty from "./PlasmicHeaderNav.module.css" // plasmic-import: yzN9e7yMUD/css
import HeaderLogoIcon from "./icons/PlasmicIcon__HeaderLogo" // plasmic-import: K_nJDzMst/icon
import SharpStarsvgIcon from "./icons/PlasmicIcon__SharpStarsvg" // plasmic-import: zpJfbKID_/icon

export const PlasmicHeaderNav__VariantProps = new Array()

export const PlasmicHeaderNav__ArgProps = new Array()

function PlasmicHeaderNav__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.PlasmicLink
        className={classNames(defaultcss.all, sty.link___3FPa)}
        component={Link}
        href={"/"}
        platform={"gatsby"}
      >
        <HeaderLogoIcon
          className={classNames(defaultcss.all, sty.svg__ohNq7)}
          role={"img"}
        />
      </p.PlasmicLink>

      <div className={classNames(defaultcss.all, sty.box___4JSt)}>
        <div className={classNames(defaultcss.all, sty.box__hmvxy)}>
          <p.PlasmicLink
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.link__gr0Oc
            )}
            component={Link}
            href={"/"}
            platform={"gatsby"}
          >
            {"Home"}
          </p.PlasmicLink>

          <SharpStarsvgIcon
            className={classNames(defaultcss.all, sty.svg__kbzaW)}
            role={"img"}
          />

          <p.PlasmicLink
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.link__siPm9
            )}
            component={Link}
            href={"/services"}
            platform={"gatsby"}
          >
            {"Services"}
          </p.PlasmicLink>

          <SharpStarsvgIcon
            className={classNames(defaultcss.all, sty.svg__hwm81)}
            role={"img"}
          />

          <p.PlasmicLink
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.link__wJs1
            )}
            component={Link}
            href={"/values"}
            platform={"gatsby"}
          >
            {"Values"}
          </p.PlasmicLink>

          <SharpStarsvgIcon
            className={classNames(defaultcss.all, sty.svg__cS9VC)}
            role={"img"}
          />

          <p.PlasmicLink
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.link___3S9Zk
            )}
            component={Link}
            href={"/about"}
            platform={"gatsby"}
          >
            {"About"}
          </p.PlasmicLink>

          <SharpStarsvgIcon
            className={classNames(defaultcss.all, sty.svg__lqyDs)}
            role={"img"}
          />

          <p.PlasmicLink
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.link__lsGpQ
            )}
            component={Link}
            href={"/contact"}
            platform={"gatsby"}
          >
            {"Contact"}
          </p.PlasmicLink>
        </div>
      </div>
    </div>
  )
}

const PlasmicDescendants = {
  root: ["root"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeaderNav__ArgProps,
      internalVariantPropNames: PlasmicHeaderNav__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicHeaderNav__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicHeaderNav"
  } else {
    func.displayName = `PlasmicHeaderNav.${nodeName}`
  }
  return func
}

export const PlasmicHeaderNav = Object.assign(
  // Top-level PlasmicHeaderNav renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicHeaderNav
    internalVariantProps: PlasmicHeaderNav__VariantProps,
    internalArgProps: PlasmicHeaderNav__ArgProps,
  }
)

export default PlasmicHeaderNav
/* prettier-ignore-end */
