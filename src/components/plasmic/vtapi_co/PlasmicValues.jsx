// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fsvVCJNXhN88gnWPeurk82
// Component: iBGeKHaiOZ
import * as React from "react"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import HeaderNav from "../../HeaderNav" // plasmic-import: yzN9e7yMUD/component
import Footer from "../../Footer" // plasmic-import: BxuEl8DsYN/component
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_vtapi_co.module.css" // plasmic-import: fsvVCJNXhN88gnWPeurk82/projectcss
import * as sty from "./PlasmicValues.module.css" // plasmic-import: iBGeKHaiOZ/css

export const PlasmicValues__VariantProps = new Array()

export const PlasmicValues__ArgProps = new Array()

function PlasmicValues__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <HeaderNav
            data-plasmic-name={"headerNav"}
            data-plasmic-override={overrides.headerNav}
            className={classNames("__wab_instance", sty.headerNav)}
          />

          <div className={classNames(defaultcss.all, sty.box__gr6Ot)}>
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__pvwt
              )}
            >
              {"Values"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__bupdi
              )}
            >
              {
                "These are the guiding principals and overall strategies used to provide the best outcomes for customers and their projects."
              }
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__hn55Y
              )}
            >
              {"1. 100% Honesty and Transparency"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box___6Uu1X
              )}
            >
              {"2. Use the best tools available"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box___34V1N
              )}
            >
              {"3. Avoid vendor lock in and use cross platform tools"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__j7Gwz
              )}
            >
              {
                "4. Question everything, be willing to deeply understand the problem"
              }
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box___8YjnS
              )}
            >
              {"5. Make decisions based on demonstrable facts and reasoning"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__syS6N
              )}
            >
              {"6. Communicate often and with specific purpose"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box___3YsoW
              )}
            >
              {
                "7. Prioritize learning and establishing self-sufficiency over stopgap bandaids"
              }
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box___7DjZg
              )}
            >
              {"8. Respect and aknowledge what you don't know."}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__u5Hk1
              )}
            >
              {
                "9. Help others learn and achieve instead of just solving their problems"
              }
            </div>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  )
}

const PlasmicDescendants = {
  root: ["root", "headerNav", "footer"],
  headerNav: ["headerNav"],
  footer: ["footer"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicValues__ArgProps,
      internalVariantPropNames: PlasmicValues__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicValues__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicValues"
  } else {
    func.displayName = `PlasmicValues.${nodeName}`
  }
  return func
}

export const PlasmicValues = Object.assign(
  // Top-level PlasmicValues renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerNav: makeNodeComponent("headerNav"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicValues
    internalVariantProps: PlasmicValues__VariantProps,
    internalArgProps: PlasmicValues__ArgProps,
  }
)

export default PlasmicValues
/* prettier-ignore-end */
