// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fsvVCJNXhN88gnWPeurk82
// Component: KVUQZ1P_TI
import * as React from "react"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_vtapi_co.module.css" // plasmic-import: fsvVCJNXhN88gnWPeurk82/projectcss
import * as sty from "./PlasmicGFormsContactForm.module.css" // plasmic-import: KVUQZ1P_TI/css

export const PlasmicGFormsContactForm__VariantProps = new Array()

export const PlasmicGFormsContactForm__ArgProps = new Array()

function PlasmicGFormsContactForm__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__huPBi)}>
        <div className={classNames(defaultcss.all, sty.box__mCvn)}>
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__rxkWg
            )}
          >
            {"Email"}
          </div>

          <input
            className={classNames(defaultcss.input, sty.textbox___6Hf5I)}
            placeholder={"Some placeholder"}
            size={1}
            type={"text"}
            value={"Some value"}
          />
        </div>

        <div className={classNames(defaultcss.all, sty.box__boKVt)}>
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__yGwDl
            )}
          >
            {"Name"}
          </div>

          <input
            className={classNames(defaultcss.input, sty.textbox__zb7Uc)}
            placeholder={"Some placeholder"}
            size={1}
            type={"text"}
            value={"Some value"}
          />
        </div>

        <div className={classNames(defaultcss.all, sty.box__velqg)}>
          <div className={classNames(defaultcss.all, sty.box__qts7Z)}>
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__u4D9O
              )}
            >
              {"What do you need help with?"}
            </div>

            <textarea
              data-plasmic-name={"textarea"}
              data-plasmic-override={overrides.textarea}
              className={classNames(defaultcss.textarea, sty.textarea)}
              value={
                "Please describe your challenges, hopes and dreams. Be descriptive!"
              }
            />

            <button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames(
                defaultcss.button,
                defaultcss.__wab_text,
                sty.button
              )}
            >
              {"Send Message"}
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

const PlasmicDescendants = {
  root: ["root", "textarea", "button"],
  textarea: ["textarea"],
  button: ["button"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicGFormsContactForm__ArgProps,
      internalVariantPropNames: PlasmicGFormsContactForm__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicGFormsContactForm__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicGFormsContactForm"
  } else {
    func.displayName = `PlasmicGFormsContactForm.${nodeName}`
  }
  return func
}

export const PlasmicGFormsContactForm = Object.assign(
  // Top-level PlasmicGFormsContactForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textarea: makeNodeComponent("textarea"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicGFormsContactForm
    internalVariantProps: PlasmicGFormsContactForm__VariantProps,
    internalArgProps: PlasmicGFormsContactForm__ArgProps,
  }
)

export default PlasmicGFormsContactForm
/* prettier-ignore-end */
