// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fsvVCJNXhN88gnWPeurk82
// Component: BxuEl8DsYN
import * as React from "react"
import { Link } from "gatsby"
import * as p from "@plasmicapp/react-web"
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web"
import "@plasmicapp/react-web/lib/plasmic.css"
import * as defaultcss from "../plasmic__default_style.module.css" // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_vtapi_co.module.css" // plasmic-import: fsvVCJNXhN88gnWPeurk82/projectcss
import * as sty from "./PlasmicFooter.module.css" // plasmic-import: BxuEl8DsYN/css
import FooterBigIcon from "./icons/PlasmicIcon__FooterBig" // plasmic-import: HwMgH-etw/icon
import HikingBlack24DpsvgIcon from "./icons/PlasmicIcon__HikingBlack24Dpsvg" // plasmic-import: zisVgd0cQ/icon
import SettingsSuggestBlack24DpsvgIcon from "./icons/PlasmicIcon__SettingsSuggestBlack24Dpsvg" // plasmic-import: k7onMx6ai/icon

export const PlasmicFooter__VariantProps = new Array()

export const PlasmicFooter__ArgProps = new Array()

function PlasmicFooter__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__ij7E3)}>
        <FooterBigIcon
          className={classNames(defaultcss.all, sty.svg__crbm)}
          role={"img"}
        />
      </div>

      <div className={classNames(defaultcss.all, sty.box__gwUDu)}>
        <p.PlasmicLink
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.link__vF5
          )}
          component={Link}
          href={"/"}
          platform={"gatsby"}
        >
          {"Home"}
        </p.PlasmicLink>

        <p.PlasmicLink
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.link___5Fo4
          )}
          component={Link}
          href={"/about"}
          platform={"gatsby"}
        >
          {"About"}
        </p.PlasmicLink>

        <p.PlasmicLink
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.link__v4LGq
          )}
          component={Link}
          href={"/services"}
          platform={"gatsby"}
        >
          {"Services"}
        </p.PlasmicLink>

        <p.PlasmicLink
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.link__cehhu
          )}
          component={Link}
          href={"/values"}
          platform={"gatsby"}
        >
          {"Values"}
        </p.PlasmicLink>

        <p.PlasmicLink
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.link__ksheP
          )}
          component={Link}
          href={"/contact"}
          platform={"gatsby"}
        >
          {"Contact"}
        </p.PlasmicLink>
      </div>

      <div className={classNames(defaultcss.all, sty.box__xyT9B)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box___7CZrm)}
        >
          <HikingBlack24DpsvgIcon
            className={classNames(defaultcss.all, sty.svg___8Nnfm)}
            role={"img"}
          />

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__v41Ks
            )}
          >
            {"vtapi.co"}
          </div>

          <SettingsSuggestBlack24DpsvgIcon
            className={classNames(defaultcss.all, sty.svg__ngcvs)}
            role={"img"}
          />
        </p.Stack>
      </div>
    </div>
  )
}

const PlasmicDescendants = {
  root: ["root"],
}

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps,
    })

    const { dataFetches } = props
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    })
  }
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter"
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`
  }
  return func
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps,
  }
)

export default PlasmicFooter
/* prettier-ignore-end */
